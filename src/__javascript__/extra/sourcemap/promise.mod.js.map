{
	"version": 3,
	"file": "src/__javascript__/promise.mod.js",
	"sources": [
		"src/promise.py"
	],
	"sourcesContent": [
		"__pragma__('kwargs')\n__pragma__('alias', 'js_finally', 'finally')\n\n\nclass TimerPromise(object):\n    '''A wrapper around Promise, with added progress (do) capability'''\n    # I'm wrapping Promise instead of extending it because Promise is \n    # a little weird to subclass.  It requires new to be called, and \n    # then() and catch() return new Promise objects.  Using composition\n    # instead.\n    \n    def __init__(self, executor):\n        self.resolve\n        self.reject\n        self.executor = executor\n        self.do_handlers = []\n        self.promise = __new__(Promise(self._executor)).then(self._cleanup, self._cleanup)\n    \n\n    def _cleanup(self):\n        '''Called when resolved or rejected'''\n        self.resolve = None\n        self.reject = None\n        self.do_handlers = None\n        self.promise = None\n        \n\n    def do(self, onAlarm):\n        '''Registers an observer to be called when the timer reaches zero'''\n        if self.do_handlers is not None:\n            self.do_handlers.append(onAlarm)\n        return self\n        \n\n    def alarm(self, context, args):\n        '''Triggers the do() handlers (called when the timer reaches zero)'''\n        console.log('alarm called!')\n        if self._pending:\n            for f in self.do_handlers:\n                f.apply(context, args)\n\n        \n    def _executor(self, resolve, reject):\n        '''Adds the alarm function to resolve and reject'''\n        console.log('saving resolve and reject')\n        self.resolve = resolve\n        self.reject = reject\n        self.executor()\n        self.executor = None\n        \n        \n    def _pending(self):\n        return bool(self.do_handlers)\n    pending = property(pending)\n\n    \n    ###  Promise Passthroughs  ##\n    \n    def catch(self, *args, **kwargs):\n        self.promise = self.promise.catch(*args, **kwargs)\n        return self\n        \n    def then(self, *args, **kwargs):\n        self.promise = self.promise.then(*args, **kwargs)\n        return self\n        \n    def js_finally(self, *args, **kwargs):\n        self.promise = self.promise.js_finally(*args, **kwargs)\n        return self\n        \n    ###  End Promise Passthroughs  ##        \n        "
	],
	"mappingsfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}