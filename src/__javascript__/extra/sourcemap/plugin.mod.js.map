{
	"version": 3,
	"file": "src/__javascript__/plugin.mod.js",
	"sources": [
		"src/plugin.py"
	],
	"sourcesContent": [
		"# Author: Conan C. Albrecht <doconix@gmail.com>\n# Version: 2.0.3\n# License: MIT\n#\n# See the readme.md file for docs.\n#\n\n   \nDEFAULT_OPTIONS = {\n    # timer duration in milliseconds\n    'millis': 1000,\n\n    # maximum number of timer callbacks (< 1 is infinite runs)\n    'max_runs': 0,\n\n    # name of this timer (only one timer of a given name can exist\n    # on a given element at a time).\n    'name': 'default',    \n}\n\n# we don't need to be in an anonymous function because Transcrypt already places\n# everything in this file inside one - we're already in a local scope.\nS = jQuery\n\nfrom storage import get_timers\n\n############################################\n###  Main plugin entry point\n\ndef timers(options, tname):\n    '''Main plugin function'''\n    elems = this\n    \n    # shortcuts\n    if options == 'cancel':\n        for e in elems:\n            for timer in get_timers(S(e), tname):\n                timer.cancel()\n        return elems\n        \n    elif options == 'list':\n        timers = []\n        for e in elems:\n            timers.extend(get_timers(S(e), tname))\n        return timers\n        \n    # if we get here, the user is hitting the secondary namespace\n    return SecondaryNamespace(elems)\n        \n        \n# attach plugin fnction to jQuery prototype\n# only one function so not using extend()\nS.fn.timers = timers\nS.fn.timers.defaults = DEFAULT_OPTIONS\nS.fn.timers.VERSION = \"2.0.3\"\n\n\n\n\n\n####################################################################\n###  A secondary namespace that allows us to have multiple functions\n###  under a single name (see jQuery namespace pattern), e.g.:\n###\n###      $('#div1').timers().Timer({...})\n###      $('#div2').timers().SleepTimer({...})\n\nimport timer_once, timer_sleep, timer_interval\n\n\nclass SecondaryNamespace(object):\n    '''\n    Factory that creates timer classes.  To have a secondary namespace,\n    we have to hold the `this` variable from the primary call.  We\n    create this object when .timers() is called, which holds `elems`\n    for the secondary call (one of the methods below).\n    '''\n    def __init__(self, elems):\n        self.elems = elems\n        \n    def _create_timer(self, klass, options):\n        # shortcuts\n        if S.isNumeric(options):\n            options = { 'millis': options }\n        \n        # options\n        combined = {}\n        combined.update(S.fn.timers.defaults)\n        if options is not None:\n            combined.update(options)\n            \n        # set timer on each element in the jquery array\n        deferred = S.Deferred()\n        for e in self.elems:\n            klass(e, combined, deferred)\n        p = deferred.promise()\n        p.do = p.progress  # alias because \"do\" is a more appropriate name, but we still are able to take advantage of built-in functionality\n        return p\n        \n    def Timer(self, options):\n        return self._create_timer(timer_once.OnceTimer, options)\n        \n    def SleepTimer(self, options):\n        return self._create_timer(timer_sleep.SleepTimer, options)\n\n    def SleepAfterTimer(self, options):\n        return self._create_timer(timer_sleep.SleepAfterTimer, options)\n\n    def IntervalTimer(self, options):\n        return self._create_timer(timer_interval.IntervalTimer, options)\n\n    def IntervalAfterTimer(self, options):\n        return self._create_timer(timer_interval.IntervalAfterTimer, options)\n\n\n\n\n\n"
	],
	"mappings": "AAAA;AAgHA;AAAA;AAAA;AAxGA;AAcA;AAEA;AAKA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAKA;AACA;AACA;AAaA;AAAA;AAAA;AAGA;AAOA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}