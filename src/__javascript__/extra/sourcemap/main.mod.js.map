{
	"version": 3,
	"file": "src/__javascript__/main.mod.js",
	"sources": [
		"src/main.py"
	],
	"sourcesContent": [
		"# Author: Conan C. Albrecht <doconix@gmail.com>\n# Version: 2.0.9\n# License: MIT\nfrom storage import get_timers\nimport timer_once, timer_sleep, timer_interval\n\n\n############################################\n###  Main module\n\nclass Timers(object):\n    def __init__(self):\n        self.defaults = {\n            # timer duration in milliseconds\n            'millis': 1000,\n\n            # maximum number of timer callbacks (< 1 is infinite runs)\n            'maxRuns': 0,\n\n            # name of this timer (only one timer of a given name can exist\n            # on a given element at a time).\n            'name': 'default',    \n        }\n        \n        \n    def cancel(self, elem, tname):\n        '''Cancels the timers on the given element, optionally filtered by name'''\n        for timer in get_timers(elem, tname):\n            timer.cancel()\n        \n\n    def timers(self, elem, tname):\n        '''Returns an array of timers on the given element, optionally filtered by name'''\n        return get_timers(elem, tname)\n        \n    \n    def Timer(self, elem, options):\n        '''Starts a one-time timer'''\n        return self._create(timer_once.OnceTimer, elem, options)\n        \n\n    def SleepTimer(self, elem, options):\n        '''\n        Starts a repeating timer with an exact time between the \n        end of previous run and start of next run.\n        '''\n        return self._create(timer_sleep.SleepTimer, elem, options)\n\n\n    def SleepAfterTimer(self, elem, options):\n        '''\n        Runs the do() function, then starts a repeating timer with \n        an exact time between the end of previous run and start of next run.\n        '''\n        return self._create(timer_sleep.SleepAfterTimer, elem, options)\n\n\n    def IntervalTimer(self, elem, options):\n        '''\n        Starts a repeating timer with an exact time between the\n        start of previous run and start of next run.\n        '''\n        return self._create(timer_interval.IntervalTimer, elem, options)\n\n\n    def IntervalAfterTimer(self, elem, options):\n        '''\n        Runs the do() function, then starts a repeating timer with \n        an exact time between the start of previous run and start of next run.\n        '''\n        return self._create(timer_interval.IntervalAfterTimer, elem, options)\n\n\n    def _create(self, timer_class, elem, options):\n        # checks\n        if not elem:\n            console.warn('Timer set on undefined element. Setting on document instead.')\n            elem = document\n        \n        # shortcuts\n        if typeof(options) == 'number':\n            options = { 'millis': options }\n    \n        # options\n        combined = {}\n        combined.update(self.defaults)\n        if options is not None:\n            combined.update(options)\n        \n        # create and return the timer\n        return timer_class(elem, combined)\n        \n\n\n\n######################################################\n###  Export the library, depending on the environment\n\ndef in_browser():\n    '''Returns true if running in a browser environment'''\n    return typeof(window) is not 'undefined'\n    \ndef in_commonjs():\n    '''Returns true if running in CommonJS with require(), such as node/npm'''\n    return typeof(module) is 'object' and module.exports\n    \ndef in_amd():\n    '''Returns true if running in Asynchronous module definition environment'''\n    return typeof(define) is 'function' and define.amd\n    \n    \nif in_commonjs():\n    module.exports = Timers()\n    \nelif in_browser():\n    window['Timers'] = Timers()\n\n\n    "
	],
	"mappings": "AAAA;AAmHA;AAAA;AAAA;AAhHA;AACA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAaA;AAEA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AAGA;AAEA;AAAA;AAGA;AAKA;AAAA;AAGA;AAKA;AAAA;AAGA;AAKA;AAAA;AAGA;AAKA;AAAA;AAGA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAQA;AAEA;AAAA;AAEA;AAEA;AAAA;AAEA;AAEA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}