{
	"version": 3,
	"file": "tests/__javascript__/test_once.mod.js",
	"sources": [
		"tests/test_once.py"
	],
	"sourcesContent": [
		"from test_base import TestBase\nS = jQuery\n\n    \nclass TestTimer(TestBase):\n    NEEDED_TIME = 1000\n\n    def begin(self):\n        self.counter = 0\n        self.then_counter = 0\n        self.start_time = __new__(Date())\n        def func():\n            self.counter += 1\n        def then():\n            self.then_counter += 1\n        self.div.timers().Timer({\n            'millis': 500,\n        }).do(func).then(then)\n        \n    def end(self):\n        self.assertTrue(self.counter == 1)\n        self.assertTrue(self.then_counter == 1)\n        \nS.fn.timers.TESTS.append(TestTimer)\n    \n    \n    \nclass TestNamedTimers(TestBase):\n    NEEDED_TIME = 1000\n\n    def begin(self):\n        self.counter = 0\n        def func():\n            self.counter += 1\n        self.div.timers().Timer({\n            'millis': 400,\n            'name': 'first',\n        }).do(func)\n        self.div.timers().Timer({\n            'millis': 600,\n            'name': 'second',\n        }).do(func)\n        \n    def end(self):\n        self.assertTrue(self.counter == 2)\n        \nS.fn.timers.TESTS.append(TestNamedTimers)\n    \n    \n    \nclass TestSameNamedTimers(TestBase):\n    NEEDED_TIME = 1000\n\n    def begin(self):\n        self.counter = 0\n        def func():\n            self.counter += 1\n        self.div.timers().Timer({\n            'millis': 400,\n            'name': 'same',\n        }).do(func)\n        # this second one should override the first\n        self.div.timers().Timer({\n            'millis': 600,\n            'name': 'same',\n        }).do(func)\n        \n    def end(self):\n        self.assertTrue(self.counter == 1)\n        \nS.fn.timers.TESTS.append(TestSameNamedTimers)\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAIA;AAAA;AAKA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAKA;AAAA;AAKA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}