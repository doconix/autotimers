{
	"version": 3,
	"file": "tests/__javascript__/test_once.mod.js",
	"sources": [
		"tests/test_once.py"
	],
	"sourcesContent": [
		"from test_base import TestBase\n\n    \nclass TestTimer(TestBase):\n    NEEDED_TIME = 1000\n\n    def begin(self):\n        self.counter = 0\n        self.then_counter = 0\n        self.start_time = __new__(Date())\n        def func():\n            self.counter += 1\n        def then():\n            self.then_counter += 1\n        Timers.Timer(self.div, {\n            'millis': 500,\n        }).do(func).then(then)\n        \n    def end(self):\n        self.assertTrue(self.counter == 1)\n        self.assertTrue(self.then_counter == 1)\n        \ndocument.TESTS.append(TestTimer)\n    \n    \n    \nclass TestNamedTimers(TestBase):\n    NEEDED_TIME = 1000\n\n    def begin(self):\n        self.counter = 0\n        def func():\n            self.counter += 1\n        Timers.Timer(self.div, {\n            'millis': 400,\n            'name': 'first',\n        }).do(func)\n        Timers.Timer({\n            'millis': 600,\n            'name': 'second',\n        }).do(func)\n        \n    def end(self):\n        self.assertTrue(self.counter == 2)\n        \ndocument.TESTS.append(TestNamedTimers)\n    \n    \n    \nclass TestSameNamedTimers(TestBase):\n    NEEDED_TIME = 1000\n\n    def begin(self):\n        self.counter = 0\n        def func():\n            self.counter += 1\n        Timers.Timer(self.div, {\n            'millis': 400,\n            'name': 'same',\n        }).do(func)\n        # this second one should override the first\n        Timers.Timer(self.div, {\n            'millis': 600,\n            'name': 'same',\n        }).do(func)\n        \n    def end(self):\n        self.assertTrue(self.counter == 1)\n        \ndocument.TESTS.append(TestSameNamedTimers)\n\n\nclass TestArgs(TestBase):\n    NEEDED_TIME = 2000\n\n    def begin(self):\n        self.counter = 0\n        def func():\n            self.counter += 1\n        self.timer1 = Timers.Timer({ 'name': 'timer1' }).do(func)\n        self.timer2 = Timers.Timer(self.div, { 'name': 'timer2' }).do(func)\n        self.timer3 = Timers.Timer(500, { 'name': 'timer3' }).do(func)\n        self.timer4 = Timers.Timer(self.div, 500, { 'name': 'timer4' }).do(func)\n        self.timer5 = Timers.Timer(500, self.div, { 'name': 'timer5' }).do(func)\n        self.timer6 = Timers.Timer({ 'name': 'timer6' }, self.div, 500).do(func)\n        self.timer7 = Timers.Timer({ 'name': 'timer7' }, 500, self.div).do(func)\n        self.timer8 = Timers.Timer(500, { 'name': 'timer8' }, self.div).do(func)\n        self.timer9 = Timers.Timer({ 'name': 'timer9', 'millis': 500 }, 700).do(func)\n        \n    def end(self):\n        self.assertTrue(self.counter == 9)\n        self.assertTrue(self.timer1.tname == 'timer1' and self.timer1.millis == 1000 and self.timer1.elem == document)\n        self.assertTrue(self.timer2.tname == 'timer2' and self.timer2.millis == 1000 and self.timer2.elem == self.div)\n        self.assertTrue(self.timer3.tname == 'timer3' and self.timer3.millis == 500 and self.timer3.elem == document)\n        self.assertTrue(self.timer4.tname == 'timer4' and self.timer4.millis == 500 and self.timer4.elem == self.div)\n        self.assertTrue(self.timer5.tname == 'timer5' and self.timer5.millis == 500 and self.timer5.elem == self.div)\n        self.assertTrue(self.timer6.tname == 'timer6' and self.timer6.millis == 500 and self.timer6.elem == self.div)\n        self.assertTrue(self.timer7.tname == 'timer7' and self.timer7.millis == 500 and self.timer7.elem == self.div)\n        self.assertTrue(self.timer8.tname == 'timer8' and self.timer8.millis == 500 and self.timer8.elem == self.div)\n        self.assertTrue(self.timer9.tname == 'timer9' and self.timer9.millis == 700 and self.timer9.elem == document)\n        \ndocument.TESTS.append(TestArgs)\n    \n    \nclass TestListTimers(TestBase):\n    NEEDED_TIME = 500\n\n    def begin(self):\n        Timers.Timer(self.div, {\n            'millis': 200,\n            'name': 'test1',\n        })\n        Timers.Timer(self.div, {\n            'millis': 300,\n            'name': 'test2',\n        })\n        self.assertTrue(len(Timers.timers(self.div)) == 2)\n        self.assertTrue(len(Timers.timers(self.div, 'test2')) == 1)\n\n    def end(self):\n        pass\n\ndocument.TESTS.append(TestListTimers)\n    "
	],
	"mappings": "AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAIA;AAAA;AAKA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAKA;AAAA;AAKA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AAIA;AAIA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}