{
	"version": 3,
	"file": "tests/__javascript__/test_fails.mod.js",
	"sources": [
		"tests/test_fails.py"
	],
	"sourcesContent": [
		"__pragma__('alias', 'S', '$')\nfrom test_base import TestBase\n\n \nclass TestZeroMillis(TestBase):\n    NEEDED_TIME = 500\n\n    def begin(self):\n        self.counter = 0\n        def func():\n            self.counter += 1\n        self.div.autotimer().Timer({\n            'func': self.func,\n            'millis': 0\n        }).do(func)\n\n    def end(self):\n        # with no func, it should not trigger\n        assert self.counter == 0\n\nS.fn.autotimer.TESTS.append(TestZeroMillis)\n\n\nclass TestDOMRemoval(TestBase):\n    NEEDED_TIME = 500\n\n    def begin(self):\n        self.counter = 0\n        def func():\n            self.counter += 1\n        self.div.autotimer().Timer({\n            'millis': 200,\n        }).do(func)\n        self.div.remove()\n\n    def end(self):\n        # with no func, it should not trigger\n        self.assertTrue(self.counter == 0)\n\nS.fn.autotimer.TESTS.append(TestDOMRemoval)\n\n\nclass TestDebugTimer(TestBase):\n    NEEDED_TIME = 500\n\n    def begin(self):\n        def func1():\n           pass\n        self.div.autotimer().Timer({\n            'millis': 200,\n            'name': 'test1',\n        }).do(func1)\n        def func2():\n            pass\n        self.div.autotimer().Timer({\n            'millis': 300,\n            'name': 'test2',\n        }).do(func2)\n        self.div.autotimer('debug')\n\n    def end(self):\n        pass\n\nS.fn.autotimer.TESTS.append(TestDebugTimer)\n\n\nclass TestCancelTimer(TestBase):\n    NEEDED_TIME = 1000\n\n    def begin(self):\n        self.counter = 0\n        def func():\n            self.counter += 1\n            self.div.autotimer('cancel')\n        self.div.autotimer().SleepTimer({\n            'millis': 200,\n            'name': 'test1',\n        }).do(func)\n        \n    def end(self):\n        self.assertTrue(self.counter == 1)\n        \nS.fn.autotimer.TESTS.append(TestCancelTimer)\n\n\nclass TestExceptionInTimer(TestBase):\n    NEEDED_TIME = 1000\n\n    def begin(self):\n        self.counter = 0\n        self.then_counter = 0\n        self.fail_counter = 0\n        def func():\n            self.counter += 1\n            raise Error('intentional')\n        def then():\n            self.then_counter += 1\n        def fail():\n            self.fail_counter += 1\n        self.div.autotimer().Timer({\n            'millis': 200,\n            'name': 'test1',\n        }).do(func).then(then).fail(fail)\n        \n    def end(self):\n        self.assertTrue(self.counter == 1)\n        self.assertTrue(self.then_counter == 0)\n        self.assertTrue(self.fail_counter == 1)\n        \nS.fn.autotimer.TESTS.append(TestExceptionInTimer)\n\n\nclass TestNoExceptionInTimer(TestBase):\n    NEEDED_TIME = 1000\n\n    def begin(self):\n        self.counter = 0\n        self.then_counter = 0\n        self.fail_counter = 0\n        def func():\n            self.counter += 1\n        def then():\n            self.then_counter += 1\n        def fail():\n            self.fail_counter += 1\n        self.div.autotimer().Timer({\n            'millis': 200,\n            'name': 'test1',\n        }).do(func).then(then).fail(fail)\n        \n    def end(self):\n        self.assertTrue(self.counter == 1)\n        self.assertTrue(self.then_counter == 1)\n        self.assertTrue(self.fail_counter == 0)\n        \nS.fn.autotimer.TESTS.append(TestNoExceptionInTimer)\n\n\n"
	],
	"mappings": "AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAKA;AAAA;AAAA;AAIA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AAAA;AAEA;AAEA;AAAA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AAIA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAKA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}