{
	"version": 3,
	"file": "tests/__javascript__/test_fails.mod.js",
	"sources": [
		"tests/test_fails.py"
	],
	"sourcesContent": [
		"from test_base import TestBase\n\n \nclass TestZeroMillis(TestBase):\n    NEEDED_TIME = 500\n\n    def begin(self):\n        self.counter = 0\n        def func():\n            self.counter += 1\n        Timers.Timer(self.div, {\n            'millis': 0\n        }).do(func)\n\n    def end(self):\n        # with no millis, it should not trigger\n        assert self.counter == 0\n\ndocument.TESTS.append(TestZeroMillis)\n\n\nclass TestDOMRemoval(TestBase):\n    NEEDED_TIME = 500\n\n    def begin(self):\n        self.counter = 0\n        def func(timer):\n            self.counter += 1\n            console.log(\"DOM DOM DOM\")\n            console.log(timer)\n        Timers.Timer(self.div, {\n            'millis': 200,\n        }).do(func)\n        self.div.remove()\n\n    def end(self):\n        # with elem out of the document, it should not trigger\n        self.assertTrue(self.counter == 0)\n\ndocument.TESTS.append(TestDOMRemoval)\n\n\n\n\nclass TestCancelTimer(TestBase):\n    NEEDED_TIME = 1000\n\n    def begin(self):\n        self.counter = 0\n        def func():\n            self.counter += 1\n            self.div.autotimer('cancel')\n        Timers.SleepTimer(self.div, {\n            'millis': 200,\n            'name': 'test1',\n        }).do(func)\n\n    def end(self):\n        self.assertTrue(self.counter == 1)\n\ndocument.TESTS.append(TestCancelTimer)\n\n\nclass TestExceptionInTimer(TestBase):\n    NEEDED_TIME = 1000\n\n    def begin(self):\n        self.counter = 0\n        self.then_counter = 0\n        self.cach_counter = 0\n        def func():\n            self.counter += 1\n            raise Error('intentional')\n        def then():\n            self.then_counter += 1\n        def fail():\n            self.cach_counter += 1\n        Timers.Timer(self.div, {\n            'millis': 200,\n            'name': 'test1',\n        }).do(func).then(then).catch(fail)\n\n    def end(self):\n        self.assertTrue(self.counter == 1)\n        self.assertTrue(self.then_counter == 0)\n        self.assertTrue(self.cach_counter == 1)\n\ndocument.TESTS.append(TestExceptionInTimer)\n\n\nclass TestNoExceptionInTimer(TestBase):\n    NEEDED_TIME = 1000\n\n    def begin(self):\n        self.counter = 0\n        self.then_counter = 0\n        self.cach_counter = 0\n        def func():\n            self.counter += 1\n        def then():\n            self.then_counter += 1\n        def fail():\n            self.cach_counter += 1\n        Timers.Timer(self.div, {\n            'millis': 200,\n            'name': 'test1',\n        }).do(func).then(then).catch(fail)\n\n    def end(self):\n        self.assertTrue(self.counter == 1)\n        self.assertTrue(self.then_counter == 1)\n        self.assertTrue(self.cach_counter == 0)\n\ndocument.TESTS.append(TestNoExceptionInTimer)\n\n\n"
	],
	"mappings": "AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAIA;AAAA;AAAA;AAIA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAGA;AAAA;AAEA;AAEA;AAAA;AAAA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAKA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}