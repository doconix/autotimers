{
	"version": 3,
	"file": "tests/__javascript__/test_base.mod.js",
	"sources": [
		"tests/test_base.py"
	],
	"sourcesContent": [
		"\n# each test is given 3 seconds to do its work. The process is:\n# .begin()\n# .func()\n# .func()\n# ...\n# .end() is called exactly 3 seconds after .begin()\n#\n# call self.resolve() or self.reject() at any time to stop the process.\n#\nclass TestBase(object):\n    NEEDED_TIME = 3000  # time from begin() to end()\n    \n    def make(self, elem_id, elem_tag='div'):\n        e = document.createElement(elem_tag)\n        e.id = elem_id\n        document.body.appendChild(e)\n        return e\n    \n    def setUp(self):\n        self.div = self.make('test1')\n\n    def tearDown(self):\n        self.div.remove()\n        \n    def promise_start(self):\n        def promise(resolve, reject):\n            self.resolve, self.reject = resolve, reject\n            self.begin()\n            window.setTimeout(self.promise_end, self.NEEDED_TIME)\n        return __new__(Promise(promise))\n        \n    def promise_end(self):\n        try:\n            self.end()\n            self.resolve()\n        except Error as err:\n            console.error(err)\n            self.reject()\n        # cancel any timers till running\n        self.div.remove()  \n\n    def begin(self):\n        raise Error('Subclass needs to implement begin()')\n    \n    def end(self):\n        raise Error('Subclass needs to implement end()')\n    \n    \n    ## Tests ##\n    \n    def assertTrue(self, cond, msg='assertTrue condition was false'):\n        if not cond:\n            raise Error(msg)"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}